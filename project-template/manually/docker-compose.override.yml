version: '3.8'

#configs:
#  nginx_config:
#    name: nginx-config-${NGINX_CONFIG:-1}
#    file: ./config/nginx.conf

services:
  nginx:
    image: vavyskov/nginx:${NGINX_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    hostname: ${PROJECT_HOSTNAME}
    #hostname: project_nginx (docker service name)
    volumes:
      ## 'nocopy' flag to disable copying of data from a container when a volume is created
      - html_data:${PROJECT_ROOT}:nocopy
#      - ./project:${PROJECT_ROOT}:cached
#      - ${PROJECT_ROOT}/vendor ## Ignore Vendor folder
      - ../../mkcert/certificates:/etc/ssl/path:ro
      #- ./logs:/var/log
    ## Docker Swarm (docker stack deploy) does not support "depends_on" :(
    depends_on:
      - php-fpm
    environment:
      PROJECT_HOSTNAME: ${PROJECT_HOSTNAME}
      #TIME_ZONE: UTC
      #NGINX_ROOT: ${NGINX_ROOT}
      #FASTCGI_HOSTNAME: ${FASTCGI_HOSTNAME}
      #FASTCGI_PORT: ${FASTCGI_PORT}
      CERTIFICATE_PATH: ${CERTIFICATE_PATH}
      CERTIFICATE_FILENAME: ${CERTIFICATE_FILENAME}
      CERTIFICATE_KEYNAME: ${CERTIFICATE_KEYNAME}
      ## Nginx-proxy
      VIRTUAL_HOST: ${PROJECT_HOSTNAME}
      VIRTUAL_PORT: 443
      VIRTUAL_PROTO: https
    ## Docker Config - store non-sensitive data as configuration files (not encrypted)
    ## cat nginx.conf | docker config create project_nginx.conf -
    #configs:
    #  - source: nginx_config
    #    target: /etc/nginx/nginx.conf
    ports:
      - target: 80
        published: ${NGINX_PORT}
    #    #mode: host
    #  - target: 443
    #    published: ${NGINX_PORT_SSL}
    #    #mode: host
    networks:
      - frontend_network
      #frontend_network:
      #  aliases:
      #    - ${PROJECT_HOSTNAME}
      - project_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          #- node.role == worker
          #- node.hostname == serverhostname
    labels:
      - traefik.enable=true
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_nginx.loadbalancer.server.port=80
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.rule=Host(`${PROJECT_HOSTNAME}`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.tls=true
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.service=${COMPOSE_PROJECT_NAME}_nginx
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.entrypoints=web,websecure
      #- traefik.http.services.${COMPOSE_PROJECT_NAME}_nginx.loadbalancer.passhostheader=true

      #- traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.middlewares=${COMPOSE_PROJECT_NAME}_ssl
      #- traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_ssl.headers.sslProxyHeaders.X-Forwarded-Proto=https
      #- traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_ssl.headers.sslRedirect=true

    #healthcheck:
    #  test: curl --fail -s http://localhost:5000/ || exit 1
    #  ##test: "/usr/bin/curl --silent --fail -o /dev/null -w %{http_code} http://localhost:9200 || exit 1"
    #  ##test: "/bin/nc -z -w3 localhost 5000 || exit 1"
    #  ##interval: 1m30s
    #  interval: 30s
    #  timeout: 10s
    #  retries: 3

  php-ssh:
    image: vavyskov/php:${PHP_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_php-ssh
    hostname: ${COMPOSE_PROJECT_NAME}_php-ssh
    ## Docker Swarm (docker stack deploy) does not support "depends_on" :(
    depends_on:
      - php-fpm
    environment:
      PROJECT_MODE: ${PROJECT_MODE}
      #TIME_ZONE: UTC
      #SSH_HOME: ${SSH_HOME}
      PHP_USER: ${PHP_USER}
      PHP_PASSWORD: ${PHP_PASSWORD}
      ## Docker Secrets - store sensitive data encrypted by default (password, ssh-key, API key, SSL certificate etc.)
      ## printf "password" | docker secret create project_ssh_password -
      #SSH_PASSWORD: /run/secrets/project_ssh_password
      GIT_EMAIL: ${GIT_EMAIL}
      GIT_NAME: ${GIT_NAME}
      PHP_SENDMAIL_PATH: ${PHP_SENDMAIL_PATH}
      SMTP_HOSTNAME: ${SMTP_HOSTNAME}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_FROM: ${SMTP_FROM}
      ## SMTP user example: ${SMTP_USER}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      PROXY_SERVER: ${PROXY_SERVER}
      HOST_USER_ID: ${HOST_USER_ID}
      PHP_INI: |
        memory_limit = -1
        upload_max_filesize = 128M
#      PHP_XDEBUG_HOSTNAME: ${XDEBUG_HOSTNAME}
#      PHP_XDEBUG_PORT: ${XDEBUG_PORT}
#      PHP_XDEBUG_LOG: ${PHP_XDEBUG_LOG}
      #APP_ENV: ${APP_ENV}
      #APP_SECRET: ${APP_SECRET}
      #DATABASE_HOSTNAME: mysql://${MARIADB_USER}:${MARIADB_PASSWORD}@database:3306/${MARIADB_DATABASE}?serverVersion=5.7
    command: /usr/sbin/sshd -D
    ports:
      ## https://community.containo.us/t/routing-ssh-traffic-with-traefik-v2/717/13
      - target: 22
        published: ${SSH_PORT}
      #- target: 9000
      #  published: ${XDEBUG_PORT}
    networks:
      - project_network
    volumes:
      ## 'nocopy' flag to disable copying of data from a container when a volume is created
      - html_data:${PROJECT_ROOT}:nocopy
#      - ./project:${PROJECT_ROOT}:cached
#      - ${PROJECT_ROOT}/vendor ## Ignore Vendor folder
#      - ~/.ssh:${SSH_HOME}/.shared/.ssh
#      - ~/.gitconfig:${SSH_HOME}/.shared/.gitconfig
    #working_dir: /var/www/html
    deploy:
      #mode: replicated
      replicas: 1

  mariadb:
#    image: mariadb:${MARIADB_VERSION}
    image: wodby/mariadb:${MARIADB_TAG}
    container_name: ${COMPOSE_PROJECT_NAME}_mariadb
    environment:
      MYSQL_DATABASE: ${MARIADB_DATABASE}
      MYSQL_USER: ${MARIADB_USER}
      MYSQL_PASSWORD: ${MARIADB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
    command: ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_czech_ci"]
    volumes:
      #- ./mariadb/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mariadb_data:/var/lib/mysql
    ports:
      - target: 3306
        published: ${MARIADB_PORT}
    networks:
      - project_network
    #stop_grace_period: 30s
    #restart: unless-stopped
    #restart: always
    deploy:
      replicas: 1
      #update_config:
      #  failure_action: rollback
      #  parallelism: 1
      #  delay: 5s
      #restart_policy:
      #  condition: on-failure
      #  delay: 5s
      #  max_attempts: 3
      #resources:
      #  limits:
      #    cpus: '0.1'
      #    memory: 2G
      #  reservations:
      #    cpus: '0.0001'
      #    memory: 50M

  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      LC_COLLATE: ${LC_COLLATE}
      LC_CTYPE: ${LC_CTYPE}
      #PGDATA: /data/postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
       #- postgres:/data/postgres
    ports:
      - target: 5432
        published: ${POSTGRES_PORT}
    networks:
#      - frontend_network
      - project_network
    #restart: unless-stopped
    #restart: always
    deploy:
      replicas: 1
      #update_config:
      #  failure_action: rollback
      #  parallelism: 1
      #  delay: 5s
      #restart_policy:
      #  condition: on-failure
      #  delay: 5s
      #  max_attempts: 3
      #resources:
      #  limits:
      #    cpus: '0.1'
      #    memory: 2G
      #  reservations:
      #    cpus: '0.0001'
      #    memory: 50M

  mailcatcher:
    image: vavyskov/mailcatcher:${MAILCATCHER_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_mailcatcher
    #hostname: project_mailcatcher (docker service name)
    #hostname: ${MAILCATCHER_HOSTNAME}
    #hostname: ${MAILCATCHER_HOSTNAME} # /mailcatcher
    environment:
      ## Nginx-proxy
      VIRTUAL_HOST: mailcatcher-${PROJECT_HOSTNAME}
      VIRTUAL_PORT: 443
      VIRTUAL_PROTO: https
    ports:
      - target: 80
        published: ${MAILCATCHER_PORT}
      - target: 25
        published: ${SMTP_PORT}
    networks:
      - frontend_network
      - project_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    labels:
      - traefik.enable=true
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_mailcatcher.loadbalancer.server.port=80
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_mailcatcher.rule=Host(`mailcatcher-${PROJECT_HOSTNAME}`)
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME}_mailcatcher.rule=Host(`${PROJECT_HOSTNAME}`) && Path(`${MAILCATCHER_PATH}`)
      ## HTTPS only
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_mailcatcher.tls=true
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME}_mailcatcher.entrypoints=websecure
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME}_mailcatcher.service=mailcatcher

  adminer:
    image: adminer:${ADMINER_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_adminer
    #hostname: project_adminer (docker service name)
    #hostname: ${MAILCATCHER_HOSTNAME}
    #hostname: ${MAILCATCHER_HOSTNAME} # /mailcatcher
    environment:
      ## Nginx-proxy
      VIRTUAL_HOST: adminer-${PROJECT_HOSTNAME}
      VIRTUAL_PORT: 443
      VIRTUAL_PROTO: https
    ports:
      - target: 8080
        published: ${ADMINER_PORT}
    networks:
      - frontend_network
      - project_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    labels:
      - traefik.enable=true
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_adminer.loadbalancer.server.port=8080
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_adminer.rule=Host(`adminer-${PROJECT_HOSTNAME}`)
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME}_adminer.rule=Host(`${PROJECT_HOSTNAME}`) && Path(`${ADMINER_PATH}`)
      ## HTTPS only
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_adminer.tls=true
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME}_adminer.entrypoints=websecure
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME}_adminer.service=adminer

  php-cron:
    image: vavyskov/php:${PHP_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_php-cron
    #hostname: "web_app_fpm"
    ## Docker Swarm (docker stack deploy) does not support "depends_on" :(
    #depends_on:
    #  - mariadb
    #  - postgres
    environment:
      #FASTCGI_PORT: ${FASTCGI_PORT}
      PROJECT_MODE: ${PROJECT_MODE}
      #TIME_ZONE: UTC
      #PHP_HOME: ${PHP_HOME}
      PHP_USER: ${PHP_USER}
      PHP_SENDMAIL_PATH: ${PHP_SENDMAIL_PATH}
      SMTP_HOSTNAME: ${SMTP_HOSTNAME}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_FROM: ${SMTP_FROM}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
#      PROXY_SERVER: ${PROXY_SERVER}
      HOST_USER_ID: ${HOST_USER_ID}
      #XDEBUG_HOSTNAME: ${XDEBUG_HOSTNAME}
      #APP_ENV: ${APP_ENV}
      #APP_SECRET: ${APP_SECRET}
      #DATABASE_HOSTNAME: mysql://${MARIADB_USER}:${MARIADB_PASSWORD}@database:3306/${MARIADB_DATABASE}?serverVersion=5.7
      PHP_CRONTAB: |
        * * * * * php -r "mail('test@example.com','CRON mail', 'Test e-mail from CRON.', 'From: cron@example.com');"
        2 * * * * php -r "mail('test@example.com','CRON mail 2', 'Test 2 e-mail from CRON.', 'From: cron@example.com');"
    command: /usr/sbin/crond -f -d 0
    networks:
      - project_network
    volumes:
      - html_data:${PROJECT_ROOT}
      #- ./config/crontab:/etc/crontabs/root
#      - ./project:${PROJECT_ROOT}:cached
#      - ${PROJECT_ROOT}/vendor ## Ignore Vendor folder
      #- ~/.ssh:${SSH_HOME}/.shared/.ssh:ro
      #- ~/.gitconfig:${SSH_HOME}/.shared/.gitconfig:ro
    #working_dir: /var/www/html
    deploy:
      replicas: 1

networks:
  frontend_network:
    external: true
  project_network:
    external: true
    name: ${COMPOSE_PROJECT_NAME}_network

volumes:
  html_data:
    name: ${COMPOSE_PROJECT_NAME}_html_data
#    driver_opts:
#      type: nfs
#      o: addr=${NFS_HOSTNAME},nolock,soft,rw
#      device: :${NFS_PATH}/${COMPOSE_PROJECT_NAME}/volumes/html_data
  mariadb_data:
    name: ${COMPOSE_PROJECT_NAME}_mariadb_data
#    driver_opts:
#      type: nfs
#      o: addr=${NFS_HOSTNAME},nolock,soft,rw
#      device: :${NFS_PATH}/${COMPOSE_PROJECT_NAME}/volumes/mariadb_data
  postgres_data:
    name: ${COMPOSE_PROJECT_NAME}_postgres_data
#    driver_opts:
#      type: nfs
#      o: addr=${NFS_HOSTNAME},nolock,soft,rw
#      device: :${NFS_PATH}/${COMPOSE_PROJECT_NAME}/volumes/postgres_data
