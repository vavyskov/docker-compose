version: '3.8'

#configs:
#  nginx_config:
#    name: nginx-config-${NGINX_CONFIG:-1}
#    file: ./config/nginx.conf

services:
  nginx:
    image: vavyskov/nginx:${NGINX_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    hostname: ${PROJECT_HOSTNAME}
    #hostname: project_nginx (docker service name)
    volumes:
      ## 'nocopy' flag to disable copying of data from a container when a volume is created
      - html_data:${PROJECT_ROOT}:nocopy
#      - ..:${PROJECT_ROOT}:cached
#      - ${PROJECT_ROOT}/vendor ## Ignore Vendor folder
      - ../../../../project-environment/certificates:/etc/ssl/certificates:ro
      #- ./logs:/var/log
    ## Docker Swarm (docker stack deploy) does not support "depends_on" :(
    depends_on:
      - php
    environment:
      PROJECT_HOSTNAME: ${PROJECT_HOSTNAME}
      FASTCGI_HOSTNAME: ${COMPOSE_PROJECT_NAME}_php
      #TIME_ZONE: UTC
      #NGINX_ROOT: ${NGINX_ROOT}
      #FASTCGI_HOSTNAME: ${FASTCGI_HOSTNAME}
      #FASTCGI_PORT: ${FASTCGI_PORT}
      CERTIFICATE_PATH: ${CERTIFICATE_PATH}
      CERTIFICATE_FILENAME: ${CERTIFICATE_FILENAME}
      CERTIFICATE_KEYNAME: ${CERTIFICATE_KEYNAME}
    ## Docker Config - store non-sensitive data as configuration files (not encrypted)
    ## cat nginx.conf | docker config create project_nginx.conf -
    #configs:
    #  - source: nginx_config
    #    target: /etc/nginx/nginx.conf
    ports:
      - target: 80
        published: ${NGINX_PORT}
    #    #mode: host
    #  - target: 443
    #    published: ${NGINX_PORT_SSL}
    #    #mode: host
    networks:
      - frontend_network
      #frontend_network:
      #  aliases:
      #    - ${PROJECT_HOSTNAME}
      - backend_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          #- node.role == worker
          #- node.hostname == serverhostname
    labels:
      - traefik.enable=true
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_nginx.loadbalancer.server.port=80
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.rule=Host(`${PROJECT_HOSTNAME}`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.tls=true
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.service=${COMPOSE_PROJECT_NAME}_nginx
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.entrypoints=web,websecure
      #- traefik.http.services.${COMPOSE_PROJECT_NAME}_nginx.loadbalancer.passhostheader=true

      #- traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.middlewares=${COMPOSE_PROJECT_NAME}_ssl
      #- traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_ssl.headers.sslProxyHeaders.X-Forwarded-Proto=https
      #- traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_ssl.headers.sslRedirect=true

    #healthcheck:
    #  test: curl --fail -s http://localhost:5000/ || exit 1
    #  ##test: "/usr/bin/curl --silent --fail -o /dev/null -w %{http_code} http://localhost:9200 || exit 1"
    #  ##test: "/bin/nc -z -w3 localhost 5000 || exit 1"
    #  ##interval: 1m30s
    #  interval: 30s
    #  timeout: 10s
    #  retries: 3

  mariadb:
#    image: mariadb:${MARIADB_VERSION}
    image: wodby/mariadb:${MARIADB_TAG}
    container_name: ${COMPOSE_PROJECT_NAME}_mariadb
    environment:
      MYSQL_DATABASE: ${MARIADB_DATABASE}
      MYSQL_USER: ${MARIADB_USER}
      MYSQL_PASSWORD: ${MARIADB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
    command: ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_czech_ci"]
    volumes:
      #- ./mariadb/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mariadb_data:/var/lib/mysql
    ports:
      - target: 3306
        published: ${MARIADB_PORT}
    networks:
      - database_network
      - project_network
    #stop_grace_period: 30s
    #restart: unless-stopped
    #restart: always
    deploy:
      replicas: 1
      #update_config:
      #  failure_action: rollback
      #  parallelism: 1
      #  delay: 5s
      #restart_policy:
      #  condition: on-failure
      #  delay: 5s
      #  max_attempts: 3
      #resources:
      #  limits:
      #    cpus: '0.1'
      #    memory: 2G
      #  reservations:
      #    cpus: '0.0001'
      #    memory: 50M

  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      LC_COLLATE: ${LC_COLLATE}
      LC_CTYPE: ${LC_CTYPE}
      #PGDATA: /data/postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
       #- postgres:/data/postgres
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - target: 5432
        published: ${POSTGRES_PORT}
    networks:
      - database_network
      - project_network
    #restart: unless-stopped
    #restart: always
    deploy:
      replicas: 1
      #update_config:
      #  failure_action: rollback
      #  parallelism: 1
      #  delay: 5s
      #restart_policy:
      #  condition: on-failure
      #  delay: 5s
      #  max_attempts: 3
      #resources:
      #  limits:
      #    cpus: '0.1'
      #    memory: 2G
      #  reservations:
      #    cpus: '0.0001'
      #    memory: 50M

networks:
  frontend_network:
    external: true
  backend_network:
    external: true
  database_network:
    external: true
  project_network:
    external: true
    name: ${COMPOSE_PROJECT_NAME}_network

volumes:
  html_data:
    name: ${COMPOSE_PROJECT_NAME}_html_data
#    driver_opts:
#      type: nfs
#      o: addr=${NFS_HOSTNAME},nolock,soft,rw
#      device: :${NFS_PATH}/${COMPOSE_PROJECT_NAME}/volumes/html_data
  mariadb_data:
    name: ${COMPOSE_PROJECT_NAME}_mariadb_data
#    driver_opts:
#      type: nfs
#      o: addr=${NFS_HOSTNAME},nolock,soft,rw
#      device: :${NFS_PATH}/${COMPOSE_PROJECT_NAME}/volumes/mariadb_data
  postgres_data:
    name: ${COMPOSE_PROJECT_NAME}_postgres_data
#    driver_opts:
#      type: nfs
#      o: addr=${NFS_HOSTNAME},nolock,soft,rw
#      device: :${NFS_PATH}/${COMPOSE_PROJECT_NAME}/volumes/postgres_data
