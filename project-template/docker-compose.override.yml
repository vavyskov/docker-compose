version: '3.5'

#configs:
#  nginx_config:
#    name: nginx-config-1
#    file: ./config/nginx.conf

services:
  nginx:
    image: vavyskov/nginx:1.17-php-fpm-alpine3.10
    container_name: project_nginx
    hostname: project.example.com
    #hostname: project_nginx (docker service name)
    volumes:
      ## 'nocopy' flag to disable copying of data from a container when a volume is created
      - html_data:/var/www/html:nocopy
#      - /etc/ss/path:/etc/ssl/path:ro
      #- ./logs:/var/log
    ## Docker Swarm (docker stack deploy) does not support "depends_on" :(
    depends_on:
      - php-fpm
#    environment:
      #NGINX_ROOT: 
      #FASTCGI_HOSTNAME: 
      #FASTCGI_PORT: 
#      CERTIFICATE_PATH: 
#      CERTIFICATE_FILENAME: 
#      CERTIFICATE_KEYNAME: 
    ## Docker Config - store non-sensitive data as configuration files (not encrypted)
    ## cat nginx.conf | docker config create project_nginx.conf -
    #configs:
    #  - source: nginx_config
    #    target: /etc/nginx/nginx.conf
    #ports:
    #  - target: 80
    #    published: 
    #    #mode: host
    #  - target: 443
    #    published: 
    #    #mode: host
    networks:
      - frontend_network
      #frontend_network:
      #  aliases:
      #    - project.example.com
      - project_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          #- node.role == worker
          #- node.hostname == serverhostname
    labels:
      - traefik.enable=true
      - traefik.http.services.project_nginx.loadbalancer.server.port=80
      - traefik.http.routers.project_nginx.rule=Host(`project.example.com`)
#     - traefik.http.routers.project_nginx.tls=true
      #- traefik.http.routers.project_nginx.service=project_nginx
      #- traefik.http.routers.project_nginx.entrypoints=https
      #- traefik.http.services.project_nginx.loadbalancer.passhostheader=true
    #healthcheck:
    #  test: curl --fail -s http://localhost:5000/ || exit 1
    #  ##test: "/usr/bin/curl --silent --fail -o /dev/null -w %{http_code} http://localhost:9200 || exit 1"
    #  ##test: "/bin/nc -z -w3 localhost 5000 || exit 1"
    #  ##interval: 1m30s
    #  interval: 30s
    #  timeout: 10s
    #  retries: 3

  ssh:
    image: vavyskov/ssh:php7.4-cli-alpine3.11
    container_name: project_ssh
#    hostname: project.example.com
    #hostname: project_ssh (docker service name)
    ## Docker Swarm (docker stack deploy) does not support "depends_on" :(
    depends_on:
      - php-fpm
#    secrets:
#      - project_ssh_password
    environment:
      PROJECT_MODE: dev
      SSH_HOME: /var/www
      SSH_USER: user
      SSH_PASSWORD: password
      GIT_EMAIL: my@email.com
      GIT_NAME: My Name
      SMTP_HOSTNAME: 192.168.99.107
      SMTP_PORT: 1026
      SMTP_FROM: team@example.com
      ## SMTP user example: 
      SMTP_USER: 
      SMTP_PASSWORD: password
      PROXY_SERVER: 
      XDEBUG_HOSTNAME: 192.168.99.1
      #APP_ENV: 
      #APP_SECRET: 
      #DATABASE_HOSTNAME: mysql://mariadb:mariadb@database:3306/mariadb?serverVersion=5.7
    ports:
      ## https://community.containo.us/t/routing-ssh-traffic-with-traefik-v2/717/13
      - target: 22
        published: 2222
      #- target: 9000
      #  published: 
    networks:
      - project_network
    volumes:
      ## 'nocopy' flag to disable copying of data from a container when a volume is created
      - html_data:/var/www/html:nocopy
#      - ~/.ssh:/var/www/.shared/.ssh:ro
#      - ~/.gitconfig:/var/www/.shared/.gitconfig:ro
    #working_dir: /var/www/html
    deploy:
      #mode: replicated
      replicas: 1

  mariadb:
    image: mariadb:10.4
    container_name: project_mariadb
    environment:
      MYSQL_DATABASE: mariadb
      MYSQL_USER: mariadb
      MYSQL_PASSWORD: mariadb
      MYSQL_ROOT_PASSWORD: root
    command: ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_czech_ci"]
    volumes:
      #- ./mariadb/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mariadb_data:/var/lib/mysql
    ports:
      - target: 3306
        published: 3308
    networks:
      - project_network
    #restart: unless-stopped
    #restart: always
    deploy:
      replicas: 1
      #update_config:
      #  failure_action: rollback
      #  parallelism: 1
      #  delay: 5s
      #restart_policy:
      #  condition: on-failure
      #  delay: 5s
      #  max_attempts: 3
      #resources:
      #  limits:
      #    cpus: '0.1'
      #    memory: 2G
      #  reservations:
      #    cpus: '0.0001'
      #    memory: 50M

  postgres:
    image: postgres:12.2-alpine
    container_name: project_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      #PGDATA: /data/postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
       #- postgres:/data/postgres
    ports:
      - target: 5432
        published: 5434
    networks:
      - project_network
    #restart: unless-stopped
    #restart: always
    deploy:
      replicas: 1
      #update_config:
      #  failure_action: rollback
      #  parallelism: 1
      #  delay: 5s
      #restart_policy:
      #  condition: on-failure
      #  delay: 5s
      #  max_attempts: 3
      #resources:
      #  limits:
      #    cpus: '0.1'
      #    memory: 2G
      #  reservations:
      #    cpus: '0.0001'
      #    memory: 50M

  mailcatcher:
    image: vavyskov/mailcatcher:alpine3.11
    container_name: project_mailcatcher
    #hostname: project_mailcatcher (docker service name)
    #hostname: mailcatcher.example.com
    #hostname: mailcatcher.example.com # /mailcatcher
    ports:
      - target: 80
        published: 1081
      - target: 25
        published: 1026
    networks:
      - frontend_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    labels:
      - traefik.enable=true
      - traefik.http.services.project_mailcatcher.loadbalancer.server.port=80
      - traefik.http.routers.project_mailcatcher.rule=Host(`mailcatcher.example.com`)
      #- traefik.http.routers.project_mailcatcher.rule=Host(`project.example.com`) && Path(``)
#      - traefik.http.routers.project_mailcatcher.tls=true
      #- traefik.http.routers.project_mailcatcher.entrypoints=https
      #- traefik.http.routers.project_mailcatcher.service=mailcatcher

  adminer:
    image: adminer:4.7-standalone
    container_name: project_adminer
    #hostname: project_adminer (docker service name)
    #hostname: mailcatcher.example.com
    #hostname: mailcatcher.example.com # /mailcatcher
    ports:
      - target: 8080
        published: 8084
    networks:
      - frontend_network
      - project_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    labels:
      - traefik.enable=true
      - traefik.http.services.project_adminer.loadbalancer.server.port=8080
      #- traefik.http.routers.project_adminer.rule=Host(``)
      - traefik.http.routers.project_adminer.rule=Host(`project.example.com`) && Path(`/adminer`)
#      - traefik.http.routers.project_adminer.tls=true
      #- traefik.http.routers.project_adminer.entrypoints=https
      #- traefik.http.routers.project_adminer.service=adminer

networks:
  frontend_network:
    external: true
  project_network:
    external: true

volumes:
  html_data:
    name: project_html_data
#    driver_opts:
#      type: nfs
#      o: addr=nfs.example.com,nolock,soft,rw
#      device: :/media/nfs_docker/dev/project/volumes/html_data
  mariadb_data:
    name: project_mariadb_data
#    driver_opts:
#      type: nfs
#      o: addr=nfs.example.com,nolock,soft,rw
#      device: :/media/nfs_docker/dev/project/volumes/mariadb_data
  postgres_data:
    name: project_postgres_data
#    driver_opts:
#      type: nfs
#      o: addr=nfs.example.com,nolock,soft,rw
#      device: :/media/nfs_docker/dev/project/volumes/postgres_data

#secrets:
#  project_ssh_password:
#    external: true

