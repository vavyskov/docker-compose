version: '3'

services:

  whoami:
    # A container that exposes an API to show its IP address
    image: containous/whoami:${WHOAMI_VERSION:-v1.4.0}
    container_name: whoami
    ports:
      - ${WHOAMI_PORT:-8082}:80
    networks:
      - frontend_network
    deploy:
      replicas: 1
      placement:
          constraints:
            - node.role == manager
    labels:
      ## Explicitly tell Traefik to expose this container
      - traefik.enable=true

      ## Load balancer (internal port)
      - traefik.http.services.whoami.loadbalancer.server.port=80

      ## Servis
      - traefik.http.routers.whoami.service=whoami

      ## The domain the service will respond to
      - traefik.http.routers.whoami.rule=Host(`whoami.example.com`)
      ## Path (Exact match)
      #- traefik.http.routers.whoami.rule=Host(`whoami.example.com`) && Path(`/whoami`)
      ## PathPrefix (Prefix matcher)
      #- traefik.http.routers.whoami.rule=Host(`whoami.example.com`) && PathPrefix(`/whoami`)

      ## TLS
      - traefik.http.routers.whoami.tls=true
      - traefik.http.routers.whoami.entrypoints=https
      #- traefik.http.routers.whoami.tls.certresolver=default
      #- traefik.http.routers.whoami.tls.certresolver=letsEncrypt

      ## Redirection
      #- traefik.http.middlewares.whoami.redirectscheme.scheme=https
      #- traefik.http.middlewares.whoami.redirectscheme.permanent=true
      #- traefik.http.middlewares.whoami.redirectscheme.port=443

      ## Middlewares: Add prefix
      #- traefik.http.middlewares.add-foo.addprefix.prefix=/whoami
      #- traefik.http.routers.whoami.middlewares=add-foo@docker

      ## Allow request only from the predefined entry point named "http"
#      - traefik.http.routers.whoami.entrypoints=http

      ## Allow request only from the predefined entry point named "https"
#      - traefik.http.routers.whoami.entrypoints=https
      ## Uses the Host rule to define which certificate to issue
#      - traefik.http.routers.whoami.tls.certresolver=mytlschallenge

      ## Network
      #- --providers.docker.network=frontend_network

      ## Test/Debug
      #- --log.level=DEBUG
      #- --certificatesresolvers.myhttpchallenge.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory

networks:
  frontend_network:
    external: true
