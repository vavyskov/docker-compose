version: '3.5'

services:
  whoami:
    # A container that exposes an API to show its IP address
    image: containous/whoami:${WHOAMI_VERSION:-v1.5.0}
    container_name: ${COMPOSE_PROJECT_NAME:-whoami}_whoami
    #hostname: whoami.example.com
    ports:
      - target: 80
        published: ${WHOAMI_PORT:-8082}
      - target: 443
        published: ${WHOAMI_PORT_SSL:-444}
    networks:
      - frontend_network
    deploy:
      replicas: 1
      placement:
          constraints:
            - node.role == manager
          #constraints: [node.role == manager]
      #update_config:
      #  failure_action: rollback
      #  parallelism: 1
      #  delay: 5s
      #restart_policy:
      #  condition: on-failure
      #  delay: 5s
      #  max_attempts: 3
      #resources:
      #  limits:
      #    memory: 128M
    #logging:
    #  driver: json-file
    #  options:
    #    max-size: 10m
    #    max-file: 3
    #logging:
    #  driver: fluentd
    #  options:
    #    fluentd-address: "192.168.99.107:24224"
    #    tag: whoami
    labels:
      ## Explicitly tell Traefik to expose this container
      - traefik.enable=true

      ## Load balancer (internal port)
      - traefik.http.services.${COMPOSE_PROJECT_NAME:-whoami}_whoami.loadbalancer.server.port=80

      #- traefik.http.services.${COMPOSE_PROJECT_NAME:-whoami}_whoami.loadbalancer.passhostheader=true

      ## Servis
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.service=${COMPOSE_PROJECT_NAME:-whoami}_whoami
      ## The router 'whoami' will forward request to service api@internal
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.service=api@internal

      ## The domain the service will respond to
      - traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.rule=Host(`whoami.example.com`)
      ## Path (Exact match)
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.rule=Host(`whoami.example.com`) && Path(`/whoami`)
      ## PathPrefix (Prefix matcher)
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.rule=Host(`whoami.example.com`) && PathPrefix(`/whoami`)

      ## Allow request from both predefined entry points "http" and "https"
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.entrypoints=web,websecure

      ## Allow request only from the predefined entry point named "http"
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.entrypoints=web

      ## Allow request only from the predefined entry point named "https"
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.entrypoints=websecure

      ## TLS
      - traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.tls=true
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.entrypoints=websecure

      ## LetsEncrypt
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.tls.certresolver=default
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.tls.certresolver=letsencrypt

      ## Redirection
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.middlewares=${COMPOSE_PROJECT_NAME:-whoami}_redirect-to-https
      #- traefik.http.middlewares.${COMPOSE_PROJECT_NAME:-whoami}_redirect-to-https.redirectscheme.scheme=https

      #- traefik.http.middlewares.${COMPOSE_PROJECT_NAME:-whoami}_whoami.redirectscheme.scheme=https
      #- traefik.http.middlewares.${COMPOSE_PROJECT_NAME:-whoami}_whoami.redirectscheme.permanent=true
      #- traefik.http.middlewares.${COMPOSE_PROJECT_NAME:-whoami}_whoami.redirectscheme.port=443

      ## Middlewares: Add prefix
      #- traefik.http.middlewares.${COMPOSE_PROJECT_NAME:-whoami}_add-foo.addprefix.prefix=/whoami
      #- traefik.http.routers.${COMPOSE_PROJECT_NAME:-whoami}_whoami.middlewares=${COMPOSE_PROJECT_NAME:-whoami}_add-foo@docker

networks:
  frontend_network:
    external: true
#  frontend_network:
#    driver: overlay
#    name: frontend_network
#    attachable: true
#    #driver_opts:
#      #encrypted: true