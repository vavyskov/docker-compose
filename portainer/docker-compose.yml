version: '3.5'

services:

  agent:
    image: portainer/agent:${AGENT_VERSION:-1.5.1}
    container_name: ${COMPOSE_PROJECT_NAME:-portainer}_agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - portainer_network
    deploy:
      mode: global
      placement:
        constraints: 
          - node.platform.os == linux

  portainer:
    image: portainer/portainer:${PORTAINER_VERSION:-1.23.2}
    container_name: ${COMPOSE_PROJECT_NAME:-portainer}_portainer
#    environment: 
#      HTTP_PROXY: example.com:8080
#      HTTPS_PROXY: example.com:8080
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - portainer_data:/data
    ports:
      - target: 9000
        published: ${PORTAINER_PORT:-9002}
      - target: 8000
        published: 8000
    networks:
      - frontend_network
      - portainer_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: 
          - node.role == manager
    labels:
      - traefik.enable=true
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      - traefik.http.routers.portainer.service=portainer

      - traefik.http.routers.portainer.rule=Host(`portainer.example.com`)
      #- traefik.http.routers.portainer.rule=Host(`portainer.example.com`) && Path(`/portainer`)
      #- traefik.http.routers.portainer.rule=Host(`portainer.example.com`) && PathPrefix(`/portainer`)

#      - traefik.http.routers.portainer.tls=true
#      - traefik.http.routers.portainer.entrypoints=https

      ## Middlewares: Strip prefix
      #- traefik.http.middlewares.portainer-strip-prefix.stripprefix.prefixes=/portainer
      #- traefik.http.middlewares.portainer-strip-prefix.stripprefix.forceslash=false
      #- traefik.http.routers.portainer.middlewares=portainer-strip-prefix@docker

      ## Middlewares: Add prefix
      #- traefik.http.middlewares.portainer-add-prefix.addprefix.prefix=/portainer
      #- traefik.http.routers.portainer.middlewares=portainer-add-prefix@docker

networks:
  frontend_network:
    external: true
  portainer_network:
    external: true

volumes:
  portainer_data:
    #driver_opts:
    #  type: nfs
    #  o: addr=${NFS_HOSTNAME:-nfs.example.com},nolock,soft,rw
    #  device: :${NFS_PATH:-/media/nfs_docker/dev/portainer/volumes/portainer_data}
