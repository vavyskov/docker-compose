version: '3.5'

#configs:
#  nginx_config:
#    name: nginx-config-${NGINX_CONFIG:-1}
#    file: ./config/nginx.conf

services:
  nginx:
    image: vavyskov/nginx:${NGINX_VERSION:-1.17-php-fpm-alpine3.10}
    container_name: ${COMPOSE_PROJECT_NAME:-project}_nginx
    volumes:
      ## 'nocopy' flag to disable copying of data from a container when a volume is created
      - html_data:${PROJECT_ROOT:-/var/www/html}:nocopy
      #- ./logs:/var/log
    ## Docker Swarm (docker stack deploy) does not support "depends_on" :(
    depends_on:
      - php-fpm
    environment:
      NGINX_ROOT: ${NGINX_ROOT:-/var/www/html/public}
      ## Hostname: php-fpm (docker service name)
      NGINX_FASTCGI_HOSTNAME: ${NGINX_FASTCGI_HOSTNAME:-php-fpm}
      NGINX_FASTCGI_PORT: ${NGINX_FASTCGI_PORT:-9000}
    ## Docker Config - store non-sensitive data as configuration files (not encrypted)
    ## cat nginx.conf | docker config create project_nginx.conf -
    #configs:
    #  - source: nginx_config
    #    target: /etc/nginx/nginx.conf
    ports:
      - target: 80
        published: ${NGINX_PORT:-8083}
        #mode: host
      - target: 443
        published: ${NGINX_PORT_SSL:-444}
        #mode: host
    networks:
      - frontend_network
      - project_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          #- node.role == worker
          #- node.hostname == serverhostname
    labels:
      - traefik.enable=true
      - traefik.http.services.nginx.loadbalancer.server.port=80
#      - traefik.http.routers.nginx.service=nginx
      - traefik.http.routers.nginx.rule=Host(`${PROJECT_HOSTNAME:-project.example.com}`)
      #- traefik.http.routers.nginx.tls=true
#      - traefik.http.routers.nginx.entrypoints=https

  ssh:
    image: vavyskov/ssh:${SSH_VERSION:-php7.4-cli-alpine3.11}
    container_name: ${COMPOSE_PROJECT_NAME:-project}_ssh
    #hostname: "web_app_ssh"
    ## Docker Swarm (docker stack deploy) does not support "depends_on" :(
    depends_on:
      - php-fpm
    environment:
      PROJECT_MODE: ${PROJECT_MODE:-dev}
      SSH_HOME: ${SSH_HOME:-/var/www}
      SSH_USER: ${SSH_USER:-user}
      SSH_PASSWORD: ${SSH_PASSWORD:-password}
      ## Docker Secrets - store sensitive data encrypted by default (password, ssh-key, API key, SSL certificate etc.)
      ## printf "password" | docker secret create project_ssh_password -
      #SSH_PASSWORD: /run/secrets/project_ssh_password
      GIT_EMAIL: ${GIT_EMAIL:-my@email.com}
      GIT_NAME: ${GIT_NAME:-My Name}
      SMTP_HOSTNAME: ${SMTP_HOSTNAME:-192.168.99.100}
      SMTP_PORT: ${SMTP_PORT:-1026}
      SMTP_FROM: team@example.com
      ## SMTP user example: ${SMTP_USER:-user}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-password}
      ## Proxy server example: ${PROXY_SERVER:-http://user:password@proxy.example.com:8080}
      PROXY_SERVER: ${PROXY_SERVER}
      XDEBUG_HOSTNAME: ${XDEBUG_HOSTNAME:-192.168.99.100}
      #APP_ENV: ${APP_ENV}
      #APP_SECRET: ${APP_SECRET}
      #DATABASE_HOSTNAME: mysql://${MARIADB_USER}:${MARIADB_PASSWORD}@database:3306/${MARIADB_DATABASE}?serverVersion=5.7
    ports:
      ## https://community.containo.us/t/routing-ssh-traffic-with-traefik-v2/717/13
      - target: 22
        published: ${SSH_PORT:-2222}
    networks:
      - project_network
    volumes:
      ## 'nocopy' flag to disable copying of data from a container when a volume is created
      - html_data:${PROJECT_ROOT:-/var/www/html}:nocopy
      #- ~/.ssh:${SSH_HOME:-/var/www}/.shared/.ssh:ro
      #- ~/.gitconfig:${SSH_HOME}/.shared/.gitconfig:ro
    #working_dir: /var/www/html
    deploy:
#      mode: replicated
      replicas: 1

  mariadb:
    image: mariadb:${MARIADB_VERSION:-10.4}
    container_name: ${COMPOSE_PROJECT_NAME:-project}_mariadb
    environment:
      MYSQL_DATABASE: ${MARIADB_DATABASE:-mariadb}
      MYSQL_USER: ${MARIADB_USER:-mariadb}
      MYSQL_PASSWORD: ${MARIADB_PASSWORD:-mariadb}
      MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD:-root}
    command: ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_czech_ci"]
    volumes:
      #- ./mariadb/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mariadb_data:/var/lib/mysql
    ports:
      - target: 3306
        published: ${MARIADB_PORT:-3308}
    networks:
      - project_network
    #restart: unless-stopped
    #restart: always
    deploy:
      replicas: 1
#      update_config:
#        failure_action: rollback
#        parallelism: 1
#        delay: 5s
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#      resources:
#        limits:
#          cpus: '0.1'
#          memory: 2G
#        reservations:
#          cpus: '0.0001'
#          memory: 50M

  postgres:
    image: postgres:${POSTGRES_VERSION:-12.2-alpine}
    container_name: ${COMPOSE_PROJECT_NAME:-project}_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DATABASE:-postgres}
      #PGDATA: /data/postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
       #- postgres:/data/postgres
    ports:
      - target: 5432
        published: ${POSTGRES_PORT:-5434}
    networks:
      - project_network
    #restart: unless-stopped
    #restart: always
    deploy:
      replicas: 1
#      update_config:
#        failure_action: rollback
#        parallelism: 1
#        delay: 5s
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#      resources:
#        limits:
#          cpus: '0.1'
#          memory: 2G
#        reservations:
#          cpus: '0.0001'
#          memory: 50M

  mailcatcher:
    image: vavyskov/mailcatcher:${MAILCATCHER_VERSION:-alpine3.11}
    container_name: ${COMPOSE_PROJECT_NAME:-project}_mailcatcher
    ports:
      - target: 80
        published: ${MAILCATCHER_PORT:-1081}
      - target: 25
        published: ${MAILCATCHER_SMTP_PORT:-1026}
    networks:
      - frontend_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    labels:
      - traefik.enable=true
      - traefik.http.services.mailcatcher.loadbalancer.server.port=80
#      - traefik.http.routers.mailcatcher.service=mailcatcher
      - traefik.http.routers.mailcatcher.rule=Host(`${MAILCATCHER_HOSTNAME:-mailcatcher.example.com}`)
      #- traefik.http.routers.mailcatcher.rule=Host(`${PROJECT_HOSTNAME:-project.example.com}`) && Path(`${MAILCATCHER_PATH:-/mailcatcher}`)
      #- traefik.http.routers.mailcatcher.tls=true
#      - traefik.http.routers.mailcatcher.entrypoints=https

  adminer:
    image: adminer:${ADMINER_VERSION:-4.7-standalone}
    container_name: ${COMPOSE_PROJECT_NAME:-project}_adminer
    ports:
      - target: 8080
        published: ${ADMINER_PORT:-8084}
    networks:
      - frontend_network
      - project_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    labels:
      - traefik.enable=true
      - traefik.http.services.adminer.loadbalancer.server.port=8080
#      - traefik.http.routers.adminer.service=adminer
      #- traefik.http.routers.adminer.rule=Host(`${ADMINER_HOSTNAME:-adminer.example.com}`)
      - traefik.http.routers.adminer.rule=Host(`${PROJECT_HOSTNAME:-project.example.com}`) && Path(`${ADMINER_PATH:-/adminer}`)
      #- traefik.http.routers.adminer.tls=true
#      - traefik.http.routers.adminer.entrypoints=https

networks:
  frontend_network:
    external: true
  project_network:
    external: true

volumes:
  html_data:
    #driver_opts:
    #  type: nfs
    #  o: addr=${NFS_HOSTNAME:-nfs.example.com},nolock,soft,rw
    #  device: :${NFS_PATH:-/media/nfs_docker/dev/project/volumes/html_data}
  mariadb_data:
    #driver_opts:
    #  type: nfs
    #  o: addr=${NFS_HOSTNAME:-nfs.example.com},nolock,soft,rw
    #  device: :${NFS_PATH:-/media/nfs_docker/dev/project/volumes/mariadb_data}
  postgres_data:
    #driver_opts:
    #  type: nfs
    #  o: addr=${NFS_HOSTNAME:-nfs.example.com},nolock,soft,rw
    #  device: :${NFS_PATH:-/media/nfs_docker/dev/project/volumes/postgres_data}
