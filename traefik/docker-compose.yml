version: "3"

#secrets:
#  ## secret name also used to name the file exposed within the container
#  ovh_endpoint:
#    ## path on the host
#    file: ./secrets/ovh_endpoint.secret
#  ovh_application_key:
#    file: ./secrets/ovh_application_key.secret
#  ovh_application_secret:
#    file: ./secrets/ovh_application_secret.secret
#  ovh_consumer_key:
#    file: ./secrets/ovh_consumer_key.secret

services:

  traefik:
    image: traefik:${TRAEFIK_VERSION:-2.1}
    container_name: traefik
    command:
      ## Traefik will listen on port 8080 by default for API request
      - --api.insecure=true
      ## Enabling docker provider
      - --providers.docker=true
      ## Do not expose containers unless explicitly told so
      - --providers.docker.exposedbydefault=false
      ## Network
      - --providers.docker.network=frontend_network
      ## Traefik will listen to incoming request on the port 80 (HTTP - custom name)
      - --entrypoints.http.address=:80
      ## Traefik will listen to incoming request on the port 443 (HTTPS - custom name)
      - --entrypoints.https.address=:443

      ## Traefik will listen to incoming request on the port 3306 (MySQL - custom name)
      #- --entrypoints.mysql.address=:3306

      ## Enable a tls challenge named "mytlschallenge"
#      - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true

      ## Enable a dns challenge named "mydnschallenge"
#      - --certificatesresolvers.mydnschallenge.acme.dnschallenge=true
      ## Tell which provider to use
#      - --certificatesresolvers.mydnschallenge.acme.dnschallenge.provider=ovh

      ## The email to provide to let's encrypt
#      - --certificatesResolvers.mytlschallenge.acme.email=postmaster@mydomain.com
      ## Tell to store the certificate on a path under our volume
#      - --certificatesResolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json

      ## Tell it to use our predefined entrypoint named "http"
#      - --certificatesresolvers.myhttpchallenge.acme.httpchallenge.entrypoint=http
      #- --certificatesresolvers.myhttpchallenge.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
#      - --certificatesresolvers.myhttpchallenge.acme.email=postmaster@mydomain.com
#      - --certificatesresolvers.myhttpchallenge.acme.storage=/letsencrypt/acme.json

      ## Test/Debug
      #- --log.level=DEBUG
      #- --certificatesResolvers.mytlschallenge.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory

    ## expose the predefined secret to the container by name
#    secrets:
#      - ovh_endpoint
#      - ovh_application_key
#      - ovh_application_secret
#      - ovh_consumer_key
#    environment:
      #- OVH_ENDPOINT=xxx
      #- OVH_APPLICATION_KEY=xxx
      #- OVH_APPLICATION_SECRET=xxx
      #- OVH_CONSUMER_KEY=xxx
#      - OVH_ENDPOINT_FILE=/run/secrets/ovh_endpoint
#      - OVH_APPLICATION_KEY_FILE=/run/secrets/ovh_application_key
#      - OVH_APPLICATION_SECRET_FILE=/run/secrets/ovh_application_secret
#      - OVH_CONSUMER_KEY_FILE=/run/secrets/ovh_consumer_key
    volumes:
      ## Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      ## Create a letsencrypt dir within the folder where the docker-compose file is
      #- ./letsencrypt:/letsencrypt
    ports:
      - 80:80
      - 443:443
      - ${TRAEFIK_PORT:-8080}:8080
      - 9000:9000
    networks:
      - frontend_network
    deploy:
      replicas: 1
      placement:
          constraints:
            - node.role == manager
    labels:
      - traefik.enable=true
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.routers.traefik.service=traefik

      - traefik.http.routers.traefik.rule=Host(`traefik.example.com`)
      #- traefik.http.routers.traefik.rule=Host(`example.com`)
      #- traefik.fronted.rule=PathPrefix:/traefik
      #- traefik.http.routers.traefik.rule=Host(`example.com`) && Path(`/traefik`)

networks:
  frontend_network:
    external: true
