global
    log stdout format raw local0
#    log /dev/log	local0
#    log /dev/log	local1 notice
#    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners

    stats timeout 30s
    daemon

    # Default SSL material locations
#    ca-base /usr/local/etc/certs/example.com.pem
#    crt-base /usr/local/etc/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL).
    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL
    #ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    #ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    #ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

resolvers docker_resolver
    nameserver dns 127.0.0.11:53

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  httpclose
    option  forwardfor
    timeout connect 5000
    timeout client  50000
    timeout server  50000
#    errorfile 400 /etc/haproxy/errors/400.http
#    errorfile 403 /etc/haproxy/errors/403.http
#    errorfile 408 /etc/haproxy/errors/408.http
#    errorfile 500 /etc/haproxy/errors/500.http
#    errorfile 502 /etc/haproxy/errors/502.http
#    errorfile 503 /etc/haproxy/errors/503.http
#    errorfile 504 /etc/haproxy/errors/504.http

frontend stats
    bind *:1936
    mode http
    log  global

    maxconn 10

    stats enable
    stats hide-version
    stats refresh 30s
    stats show-node
    stats auth admin:admin
    stats uri  /haproxy/stats

frontend http
    bind *:80
    mode http
    acl is_well_known path_beg -i /.well-known/

    redirect scheme https code 301 if !is_well_known !{ ssl_fc }
    #http-request redirect scheme https unless { ssl_fc }
    #http-request redirect scheme https code 301 unless { ssl_fc }

    use_backend letsencrypt if is_well_known

backend letsencrypt
    server letsencrypt nginx-certbot:80 resolvers docker_resolver check init-addr none

frontend https
    bind *:443 ssl crt /usr/local/etc/certs/example.com.pem
    http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"

#    mode http
#    http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"
#    mode tcp
#    acl tls req.ssl_hello_type 1
#    tcp-request inspect-delay 5s
#    tcp-request content accept if tls

    #acl lemp req.ssl_sni -i lemp.example.com
    acl project hdr(host) -i project.example.com
    use_backend project if project

    #acl lemp req.ssl_sni -i lemp.example.com
    acl lemp hdr(host) -i lemp.example.com
    use_backend lemp if lemp

    #acl lepp req.ssl_sni -i lepp.example.com
    acl lepp  hdr(host) -i lepp.example.com
    use_backend lepp if lepp

    default_backend project

backend project
    server project project_nginx:443 check ssl verify none

backend lemp
    server lemp lemp_nginx:443 check ssl verify none

backend lepp
    #server lepp lepp_nginx:80 resolvers docker_resolver check init-addr none
    #http-request add-header X-Forwarded-Proto https if { ssl_fc }

    #mode tcp
    #option ssl-hello-chk
    #server lepp lepp_nginx:443 check

    ## The "ssl" part defines that the backend speaks SSL, if it is not present, haproxy will default to plain HTTP.
    ## The "verify none" disables certificate check, something you probably don't want to do with your internal servers anyway.
    #server lepp lepp_nginx:443 weight 1 maxconn 8192 check ssl verify none
    server lepp lepp_nginx:443 check ssl verify none
    #http-request add-header X-Forwarded-Proto https if { ssl_fc }
    #http-request set-header X-Forwarded-Proto https if { ssl_fc }
    #http-request set-header X-Forwarded-Proto http if !{ ssl_fc }